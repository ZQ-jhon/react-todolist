{"version":3,"sources":["CONFIG.ts","utils/autobind.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["LOCAL_STORAGE_FIELD","list","window","localStorage","getItem","boundMethod","target","key","descriptor","fn","value","TypeError","concat","definingProperty","configurable","get","this","prototype","hasOwnProperty","boundFn","bind","Object","defineProperty","set","autobind","arguments","length","keys","Reflect","ownKeys","getOwnPropertyNames","getOwnPropertySymbols","forEach","getOwnPropertyDescriptor","apply","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","keypress","e","which","updateView","split","inputValue","_this2","setState","toConsumableArray","setItem","i","splice","join","_this3","react_default","a","createElement","className","type","onKeyPress","onChange","handleChange","onClick","map","item","index","deleteItem","React","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ea0d9fa.chunk.js","sourcesContent":["\r\ninterface IStorage {\r\n    list: string;\r\n}\r\nconst LOCAL_STORAGE_FIELD: IStorage = {\r\n    list: window.localStorage.getItem('list') || '',\r\n};\r\n\r\nexport default LOCAL_STORAGE_FIELD;","function boundMethod(target, key, descriptor) {\r\n\tlet fn = descriptor.value;\r\n\r\n\tif (typeof fn !== 'function') {\r\n\t\tthrow new TypeError(`@boundMethod decorator can only be applied to methods not: ${typeof fn}`);\r\n\t}\r\n\r\n\tlet definingProperty = false;\r\n\r\n\treturn {\r\n\t\tconfigurable: true,\r\n\t\tget() {\r\n\t\t\t// eslint-disable-next-line no-prototype-builtins\r\n\t\t\tif (definingProperty || this === target.prototype || this.hasOwnProperty(key) ||\r\n        typeof fn !== 'function') {\r\n\t\t\t\treturn fn;\r\n\t\t\t}\r\n\r\n\t\t\tconst boundFn = fn.bind(this);\r\n\t\t\tdefiningProperty = true;\r\n\t\t\tObject.defineProperty(this, key, {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tget() {\r\n\t\t\t\t\treturn boundFn;\r\n\t\t\t\t},\r\n\t\t\t\tset(value) {\r\n\t\t\t\t\tfn = value;\r\n\t\t\t\t\tdelete this[key];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tdefiningProperty = false;\r\n\t\t\treturn boundFn;\r\n\t\t},\r\n\t\tset(value) {\r\n\t\t\tfn = value;\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * Use boundMethod to bind all methods on the target.prototype\r\n */\r\nfunction boundClass(target) {\r\n\t// (Using reflect to get all keys including symbols)\r\n\tlet keys;\r\n\t// Use Reflect if exists\r\n\tif (typeof Reflect !== 'undefined' && typeof Reflect.ownKeys === 'function') {\r\n\t\tkeys = Reflect.ownKeys(target.prototype);\r\n\t} else {\r\n\t\tkeys = Object.getOwnPropertyNames(target.prototype);\r\n\t\t// Use symbols if support is provided\r\n\t\tif (typeof Object.getOwnPropertySymbols === 'function') {\r\n\t\t\tkeys = keys.concat(Object.getOwnPropertySymbols(target.prototype));\r\n\t\t}\r\n\t}\r\n\r\n\tkeys.forEach(key => {\r\n\t\t// Ignore special case target method\r\n\t\tif (key === 'constructor') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\r\n\r\n\t\t// Only methods need binding\r\n\t\tif (typeof descriptor.value === 'function') {\r\n\t\t\tObject.defineProperty(target.prototype, key, boundMethod(target, key, descriptor));\r\n\t\t}\r\n\t});\r\n\treturn target;\r\n}\r\n\r\nexport default function autobind(...args) {\r\n\tif (args.length === 1) {\r\n\t\treturn boundClass(...args);\r\n\t}\r\n\treturn boundMethod(...args);\r\n}","import React, { Props } from 'react';\nimport './App.css';\nimport LOCAL_STORAGE_FIELD from './CONFIG';\nimport autobind from './utils/autobind';\n\nexport default class App extends React.Component<Props<any>, {}> {\n  public state: any;\n  constructor(props: any) {\n    super(props);\n    const list = LOCAL_STORAGE_FIELD.list.length === 0 ? [] : LOCAL_STORAGE_FIELD.list.split(',');\n    this.state  = {\n      list,\n      inputValue: '',\n    };\n  }\n\n  @autobind\n  private updateView() {\n    // 值合法，再执行\n    if(!!this.state.inputValue) {\n      this.setState({\n        list: [...this.state.list, this.state.inputValue],\n        inputValue: '',\n      }, () => localStorage.setItem('list', this.state.list));\n    }\n  }\n  public keypress = (e: React.KeyboardEvent) =>  e.which === 13 ? this.updateView(): '';\n\n  @autobind\n  public handleChange(e:any) {\n    this.setState({\n      inputValue: e.target.value,\n    });\n  }\n\n  @autobind\n  public deleteItem(i: number){\n   const list = [...this.state.list];\n   list.splice(i,1);\n   this.setState({\n      list,\n    }, () => localStorage.setItem('list', list.join(',')));\n  }\n  public render() {\n    return (\n      <div className=\"App\">\n        <ul>\n          <input type=\"text\" value={this.state.inputValue} onKeyPress={this.keypress.bind(this)} onChange={this.handleChange} />\n          <button onClick={this.updateView}>添加</button>\n        </ul>\n        <ul>\n         {\n           this.state.list.map((item: string, index: number) => {\n             return (\n              <li key={index}>\n                <span>{item}</span> \n                <button onClick={this.deleteItem.bind(this,index)}>删除</button>\n              </li>\n             );\n           })\n         }\n        </ul>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}